from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from bot.services import api_client
from bot.states import session_manager
from bot.utils.helpers import (
    check_user_logged_in,
    handle_api_error,
    encode_image_to_base64
)
from bot.keyboards import reply_keyboards # For profile actions
from .conversation_states import PROFILE_WAITING_FOR_PIC

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if not await check_user_logged_in(update, context):
        return ConversationHandler.END # End if not logged in

    cookies = session_manager.get_cookies(user_id)
    result = api_client.check_auth_status(cookies)

    if result.get("success"):
        user_data = result.get("data")
        if not user_data:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
            return ConversationHandler.END

        full_name = user_data.get("fullName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        email = user_data.get("email", "‚Äî")
        profile_pic_url = user_data.get("profilePic") # This is a URL from backend

        text = f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <b>{full_name}</b>\nüìß Email: {email}"

        if profile_pic_url:
            try:
                await update.message.reply_photo(
                    photo=profile_pic_url,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=reply_keyboards.profile_action_markup
                )
            except Exception as e:
                await update.message.reply_text(
                    f"{text}\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è)",
                    parse_mode="HTML",
                    reply_markup=reply_keyboards.profile_action_markup
                )
        else:
            await update.message.reply_text(
                text,
                parse_mode="HTML",
                reply_markup=reply_keyboards.profile_action_markup
            )
        return PROFILE_WAITING_FOR_PIC
    else:
        await handle_api_error(update, result, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        session_manager.clear_entire_session(user_id)
        return ConversationHandler.END


async def request_new_profile_pic_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_user_logged_in(update, context):
        return ConversationHandler.END
    await update.message.reply_text(
        "üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROFILE_WAITING_FOR_PIC


async def update_profile_picture_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if not await check_user_logged_in(update, context):
        return ConversationHandler.END

    if not update.message.photo:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –∏–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."
        )
        await profile_command(update, context)
        return PROFILE_WAITING_FOR_PIC


    cookies = session_manager.get_cookies(user_id)
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    image_data_url = encode_image_to_base64(photo_bytes, mime_type="image/jpeg")

    await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...")
    profile_update_payload = {"profilePic": image_data_url}

    result = api_client.update_user_profile(cookies, profile_update_payload)

    if result.get("success"):
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await profile_command(update, context)
        return PROFILE_WAITING_FOR_PIC
    else:
        await handle_api_error(update, result, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        await profile_command(update, context)
        return PROFILE_WAITING_FOR_PIC

async def cancel_profile_update_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END