import base64
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from bot.states import session_manager

async def check_user_logged_in(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    if not session_manager.get_cookies(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
        return False
    return True

async def handle_api_error(update: Update, result: dict, default_message: str = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."):
    error_msg = result.get("error", default_message)
    await update.message.reply_text(f"‚ö†Ô∏è {error_msg}")


def encode_image_to_base64(photo_bytes: bytearray, mime_type: str = "image/jpeg") -> str:
    image_base64 = base64.b64encode(photo_bytes).decode("utf-8")
    return f"data:{mime_type};base64,{image_base64}"

def format_book_message(book: dict, owner_name: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω") -> str:
    title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    author = book.get("author", "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    categories = ", ".join(book.get("categories", []))
    price = book.get("price", "N/A")

    return (
        f"\U0001F4D6 <b>{title}</b>\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} —É.–µ.\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_name}"
    )

def login_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not await check_user_logged_in(update, context):
            return ConversationHandler.END
        return await func(update, context, *args, **kwargs)
    return wrapper