from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
import requests
import db

books_handler = CommandHandler("books", lambda update, context: get_books(update, context))

async def get_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{db.BACKEND_URL}/api/books")

        if response.status_code == 200:
            books = response.json()

            if not books:
                await update.message.reply_text("‚ùóÔ∏è–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥.")
                return

            for book in books[:]:
                title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                author = book.get("author", "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                categories = ", ".join(book.get("categories", []))
                price = book.get("price", "N/A")
                image_url = book.get("image", [None])  # First image

                message = (
                    f"\U0001F4D6 <b>{title}</b>\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author}\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} —É.–µ."
                )

                if image_url:
                    await update.message.reply_photo(photo=image_url, caption=message, parse_mode="HTML")
                else:
                    await update.message.reply_text(message, parse_mode="HTML")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ —Å –±—ç–∫–µ–Ω–¥–∞.")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
