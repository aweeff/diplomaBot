from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from state.session_store import sessions
import requests
import db

def format_book(book):
    title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    author = book.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    categories = ", ".join(book.get("categories", []))
    return f"üìö <b>{title}</b>\n‚úçÔ∏è {author}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"

async def my_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = sessions.get(user_id)

    if not session or "cookies" not in session:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
        return

    try:
        response = requests.get(
            f"{db.BACKEND_URL}/api/books/my-books",
            cookies=session["cookies"]
        )

        if response.status_code == 200:
            books = response.json()
            if not books:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
                return

            message = "\n\n".join([format_book(book) for book in books])
            await update.message.reply_text(message, parse_mode="HTML")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

my_books_handler = CommandHandler("mybooks", my_books)
