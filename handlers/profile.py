from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from state.session_store import sessions # Assuming this is your session management
import requests
import db # Assuming this is your db/config module
import base64

# State
WAITING_FOR_PROFILE_PIC = 1

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = sessions.get(user_id)

    if not session or "cookies" not in session:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
        return ConversationHandler.END

    try:
        response = requests.get(
            f"{db.BACKEND_URL}/api/auth/check", # Ensure db.BACKEND_URL is correctly defined
            cookies=session["cookies"]
        )

        if response.status_code == 200:
            user_data = response.json()
            full_name = user_data.get("fullName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            email = user_data.get("email", "‚Äî")
            profile_pic = user_data.get("profilePic")

            text = f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <b>{full_name}</b>\nüìß Email: {email}"

            keyboard = ReplyKeyboardMarkup([
                ["üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)

            if profile_pic:
                await update.message.reply_photo(
                    photo=profile_pic,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)

            return WAITING_FOR_PROFILE_PIC

        else:
            await update.message.reply_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /login.")
            if user_id in sessions: # Clear potentially invalid session
                del sessions[user_id]
            return ConversationHandler.END

    except requests.exceptions.RequestException as e: # More specific exception handling
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return ConversationHandler.END

async def request_new_profile_pic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è' button press."""
    await update.message.reply_text(
        "üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=ReplyKeyboardRemove() # Optionally remove the keyboard
    )
    # The state remains WAITING_FOR_PROFILE_PIC, now specifically waiting for a photo
    return WAITING_FOR_PROFILE_PIC


async def update_profile_picture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = sessions.get(user_id)

    if not session or "cookies" not in session:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
        return ConversationHandler.END

    if not update.message.photo:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /cancel –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'."
        )
        # Stay in the same state to allow user to send a photo or cancel
        return WAITING_FOR_PROFILE_PIC

    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_base64 = base64.b64encode(photo_bytes).decode("utf-8")
        # Backend from diploma-25c1befecf7e381202d52b5ea57474f257429b9b/backend/src/controllers/auth.controller.js
        # for updateProfile expects a base64 string which it then uploads.
        # The frontend also sends a base64 string (data URL)
        # Let's ensure we send a data URL as the frontend does.
        image_data_url = f"data:image/jpeg;base64,{image_base64}" # Assuming JPEG, adjust if needed

        await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...")

        response = requests.put(
            f"{db.BACKEND_URL}/api/auth/update-profile",
            json={"profilePic": image_data_url},
            cookies=session["cookies"]
        )
        print("updateprofile response")
        print(response.json())

        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            error_message = response.text
            try:
                error_json = response.json()
                error_message = error_json.get("message", error_message)
            except ValueError:
                pass # Keep original text if not JSON
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code} - {error_message}")

    except AttributeError: # If update.message.photo is None or similar
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return WAITING_FOR_PROFILE_PIC
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
    except Exception as e:
        await update.message.reply_text(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return ConversationHandler.END


async def cancel_profile_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

profile_handler = ConversationHandler(
    entry_points=[CommandHandler("me", profile)],
    states={
        WAITING_FOR_PROFILE_PIC: [
            MessageHandler(filters.Regex("^üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è$"), request_new_profile_pic),
            MessageHandler(filters.PHOTO, update_profile_picture),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel_profile_update),
            MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")), # Catch-all for other text
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_profile_update), # Allow /cancel command
        MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel_profile_update) # Keep this for keyboard button
    ],
)